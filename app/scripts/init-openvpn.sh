#!/bin/bash

# OpenVPN Manager - Initialize OpenVPN Server
# This script sets up a new OpenVPN server installation

set -e

# Configuration
OPENVPN_DIR="/etc/openvpn"
EASY_RSA_DIR="$OPENVPN_DIR/easy-rsa"
SERVER_NAME="server"
CA_NAME="OpenVPN-CA"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root"
   exit 1
fi

log "Starting OpenVPN server initialization..."

# Install OpenVPN and Easy-RSA if not present
if ! command -v openvpn &> /dev/null; then
    log "Installing OpenVPN..."
    apt-get update
    apt-get install -y openvpn easy-rsa iptables-persistent
fi

# Create OpenVPN directory structure
log "Creating directory structure..."
mkdir -p $OPENVPN_DIR/{clients,ccd,logs}
mkdir -p $EASY_RSA_DIR

# Copy Easy-RSA files
if [ ! -f "$EASY_RSA_DIR/easyrsa" ]; then
    log "Setting up Easy-RSA..."
    cp -r /usr/share/easy-rsa/* $EASY_RSA_DIR/
    chmod +x $EASY_RSA_DIR/easyrsa
fi

# Initialize PKI
cd $EASY_RSA_DIR
if [ ! -d "pki" ]; then
    log "Initializing PKI..."
    ./easyrsa init-pki
    
    # Create CA
    log "Creating Certificate Authority..."
    echo "$CA_NAME" | ./easyrsa build-ca nopass
    
    # Generate server certificate
    log "Creating server certificate..."
    ./easyrsa build-server-full $SERVER_NAME nopass
    
    # Generate Diffie-Hellman parameters
    log "Generating Diffie-Hellman parameters (this may take a while)..."
    ./easyrsa gen-dh
    
    # Generate TLS auth key
    log "Generating TLS authentication key..."
    openvpn --genkey --secret $OPENVPN_DIR/ta.key
fi

# Copy certificates to OpenVPN directory
log "Copying certificates..."
cp pki/ca.crt $OPENVPN_DIR/
cp pki/issued/$SERVER_NAME.crt $OPENVPN_DIR/
cp pki/private/$SERVER_NAME.key $OPENVPN_DIR/
cp pki/dh.pem $OPENVPN_DIR/

# Create server configuration
log "Creating server configuration..."
cat > $OPENVPN_DIR/server.conf << EOF
# OpenVPN Server Configuration
# Generated by OpenVPN Manager

# Network settings
port 1194
proto udp
dev tun

# SSL/TLS settings
ca ca.crt
cert $SERVER_NAME.crt
key $SERVER_NAME.key
dh dh.pem
tls-auth ta.key 0

# Network topology
topology subnet
server 10.8.0.0 255.255.255.0

# Push routes to clients
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"

# Client settings
ifconfig-pool-persist /var/log/openvpn/ipp.txt
client-config-dir $OPENVPN_DIR/ccd

# Security settings
cipher AES-256-CBC
auth SHA512
tls-version-min 1.2
tls-cipher TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384

# Connection settings
keepalive 10 120
max-clients 100
persist-key
persist-tun

# Logging
status /var/log/openvpn/openvpn-status.log
log-append /var/log/openvpn/openvpn.log
verb 3
explicit-exit-notify 1

# Management interface (for status monitoring)
management localhost 7505

# User and group (security)
user nobody
group nogroup
EOF

# Create log directory
mkdir -p /var/log/openvpn
touch /var/log/openvpn/openvpn.log
touch /var/log/openvpn/openvpn-status.log

# Set permissions
chmod 600 $OPENVPN_DIR/$SERVER_NAME.key
chmod 600 $OPENVPN_DIR/ta.key
chown -R root:root $OPENVPN_DIR

# Configure IP forwarding
log "Enabling IP forwarding..."
echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
sysctl -p

# Configure firewall
log "Configuring firewall..."
# Get the default network interface
DEFAULT_INTERFACE=$(route | grep '^default' | grep -o '[^ ]*$')

# Add iptables rules for NAT
iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o $DEFAULT_INTERFACE -j MASQUERADE
iptables -A INPUT -i tun0 -j ACCEPT
iptables -A FORWARD -i $DEFAULT_INTERFACE -o tun0 -j ACCEPT
iptables -A FORWARD -i tun0 -o $DEFAULT_INTERFACE -j ACCEPT
iptables -A INPUT -i $DEFAULT_INTERFACE -p udp --dport 1194 -j ACCEPT

# Save iptables rules
iptables-save > /etc/iptables/rules.v4

# Create systemd service file
log "Creating systemd service..."
cat > /etc/systemd/system/openvpn-server.service << EOF
[Unit]
Description=OpenVPN Server
After=network.target

[Service]
Type=notify
ExecStart=/usr/sbin/openvpn --config /etc/openvpn/server.conf
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Enable and start the service
systemctl daemon-reload
systemctl enable openvpn-server
systemctl start openvpn-server

# Create client template
log "Creating client configuration template..."
cat > $OPENVPN_DIR/client-template.conf << EOF
client
dev tun
proto udp
remote YOUR_SERVER_IP 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-CBC
ignore-unknown-option block-outside-dns
block-outside-dns
verb 3

# Certificates and keys will be embedded below
EOF

log "OpenVPN server initialization completed successfully!"
log "Server configuration: $OPENVPN_DIR/server.conf"
log "Certificate Authority: $OPENVPN_DIR/ca.crt"
log "Server logs: /var/log/openvpn/"
log ""
log "Next steps:"
log "1. Configure your firewall to allow UDP port 1194"
log "2. Update YOUR_SERVER_IP in client configurations"
log "3. Create client certificates using the add-client.sh script"

# Check if service is running
if systemctl is-active --quiet openvpn-server; then
    log "OpenVPN server is running successfully!"
else
    warn "OpenVPN server may not be running. Check logs with: journalctl -u openvpn-server"
fi
